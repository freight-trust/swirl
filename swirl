#!/bin/bash

function printHelpAndExit () {
	echo "Help           | Display this MENU."
	echo "Enter any valid JSON RPC method and parameters"
	echo "Options:"
	echo "-a newAddress -p port -P protocol"
	echo "Full Example:"
	printf "> swirl -a localhost -p 8545 -P https eth_getTransactionByHash 0x0...\n"
	printf "curl -H \"Content-Type: application/json\" -X POST --data \"{'id':120,'jsonrpc':'2.0','method':'eth_getTransactionByHash','params':'0x0..'}\" https://localhost:7545\n\n"
	echo "Default: http://localhost:8545"
	printf "> swirl eth_getTransactionByHash 0x0...\n"
	printf "curl -H \"Content-Type: application/json\" -X POST --data \"{'id':120,'jsonrpc':'2.0','method':'eth_getTransactionByHash','params':'0x0..'}\" http://localhost:8545\n\n"
	echo "Run consecutive calls:"
	printf "> swirl eth_getTransactionByHash 0x0...  eth_sendTransaction \"{'value': '0x10000000', 'gas': '0xf4240', 'from': '0x...' etc.. }\"\n\n"
	exit 0
}

function swirl_curl() {
	local host="$protocol://$address:$port"
	printf "curl -H \"Content-Type: application/json\" -X POST --data '{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"$1\",\"params\":$2}' $host\n\n"
	curl -s -H "Content-Type: application/json" -X POST --data "{\"id\":1337,\"jsonrpc\":\"2.0\",\"method\":\"$1\",\"params\":$2}" $host | python -m json.tool | pygmentize -l javascript
	echo ""
}

function is_array(){
  local re=^[[].*[]]$
  params="[$1]"
    if [[ "$1" =~ ${re} ]]; then
      params="$1"
    fi
}

if [ -z "$1" ]; then
	printHelpAndExit 1
fi

protocol="http"
address="localhost"
port="8545"
params=""

while [ "$1" != "" ]; do
	case "$1" in
		-*)
			re=^-[apP]{1}$
			while [[ "$1" =~ ${re} ]]; do
				case "$1" in
					-p)
						port="$2"
						;;
					-a)
						address="$2"
						;;
					-P)
						protocol="$2"
						;;
					-*)
						echo "p for port, a for address, P for protocol."
						exit 0
						;;
				esac
				shift;shift
			done
			echo "$protocol://$address:$port"
			;;
		eth_accounts)
			;&
		eth_hashrate)
			;&
		eth_mining)
			;&
		eth_coinbase)
			;&
		eth_syncing)
			;&
		eth_protocolVersion)
			;&
		net_peerCount)
			;&
		net_listening)
			;&
		web3_clientVersion)
			;&
		eth_getCompilers)
			;&
		eth_newBlockFilter)
			;&
		eth_getWork)
			;&
		shh_version)
			;&
		shh_newIdentity)
			;&
		shh_newGroup)
			;&
		net_version)
			;&
		eth_gasPrice)
			;&
		eth_blockNumber)
			;&
		evm_snapshot)
			swirl_curl $1 "[]"
			shift;
			;;
		web3_sha3)
			;&
		eth_getBalance)
			;&
		eth_getStorageAt)
			;&
		eth_getBlockTransactionCountByHash)
			;&
		eth_getBlockTransactionCountByNumber)
			;&
		eth_getUncleCountByBlockHash)
			;&
		eth_getUncleCountByBlockNumber)
			;&
		eth_sendRawTransaction)
			;&
		eth_getTransactionByHash)
			;&
		eth_getTransactionReceipt)
			;&
		eth_compileLLL)
			;&
		eth_compileSolidity)
			;&
		eth_compileSerpent)
			;&
		eth_newPendingTransactionFilter)
			;&
		eth_uninstallFilter)
			;&
		eth_getFilterChanges)
			;&
		shh_getFilterChanges)
			;&
		eth_getFilterLogs)
			;&
		shh_hasIdentity)
			;&
		shh_addToGroup)
			;&
		shh_uninstallFilter)
			;&
		shh_getMessages)
			;&
		eth_subscribe)
			;&
		eth_unsubscribe)
			;&
		evm_mine)
			;&
		evm_revert)
			;&
		evm_increaseTime)
			swirl_curl $1 "[\"$2\"]"
			shift;shift
			;;
		eth_newFilter)
			;&
		eth_getLogs)
			;&
		eth_estimateGas)
			swirl_curl $1 "$2"
			shift;shift
			;;
		eth_call)
			;&
		eth_sendTransaction)
			is_array "$2"
			swirl_curl $1 "$params"
			shift;shift
			;;
		eth_getBlockByHash)
			;&
		eth_getBlockByNumber)
			swirl_curl $1 "[\"$2\", $3]"
			shift;shift;shift
      ;;
		shh_post)
			;&
		shh_newFilter)
      is_array "$3"
			swirl_curl $1 "[\"$2\", $params]"
			shift;shift;shift
			;;
		eth_getUncleByBlockHashAndIndex)
			;&
		eth_getUncleByBlockNumberAndIndex)
			;&
		eth_getTransactionByBlockHashAndIndex)
			;&
		eth_getTransactionByBlockNumberAndIndex)
			;&
		db_getString)
			;&
		db_getHex)
			;&
		eth_getCode)
			;&
		eth_getTransactionCount)
			;&
		eth_submitHashrate)
			;&
		eth_sign)
			swirl_curl $1 "[\"$2\", \"$3\"]"
			shift;shift;shift
			;;
		eth_submitWork)
			;&
		db_putString)
			;&
		db_putHex)
			;&
		eth_getStorageAt)
			swirl_curl $1 "[\"$2\", \"$3\", \"$4\"]"
			shift;shift;shift;shift
			;;
		*)
			printHelpAndExit 0
		  ;;
	esac
done

exit 0
